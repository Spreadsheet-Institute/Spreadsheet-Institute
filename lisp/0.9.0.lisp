DEFINE(_1_are_2.,LAMBDA(_1,_2,FORMAT("{1} are {2}.",CAPITALIZE(_1),_2)))

DEFINE(_1_is_2.,LAMBDA(_1,_2,FORMAT("{1} is {2}.",CAPITALIZE(_1),_2)))

DEFINE(_1_is_not_2.,LAMBDA(_1,_2,FORMAT("{1} is not {2}.",CAPITALIZE(_1),_2)))

DEFINE(_Is_1_2?,LAMBDA(_1,_2,knowledgebase,LET(affirmation,CONTAINS(knowledgebase,FORMAT("{1} is {2}.",CAPITALIZE(_1),_2)),negation,CONTAINS(knowledgebase,FORMAT("{1} is not {2}.",CAPITALIZE(_1),_2)),template,IFS(AND(affirmation,negation),"Yes and no. {1} simultaneously is and is not {2}.",affirmation,"Yes. {1} is {2}.",negation,"No. {1} is not {2}.",OTHERWISE,"Unknown."),FORMAT(template,CAPITALIZE(_1),_2))))

DEFINE(ALL,LAMBDA(truth_values,AND(truth_values)))

DEFINE(ALPHABET,LAMBDA([vertical],LET(alphabet,HSTACK({"A","B","C","D","E","F"},{"G","H","I","J","K","L"},{"M","N","O","P","Q","R"},{"S","T","U","V","W","X","Y","Z"}),IF(DEFAULT(vertical,NO),TRANSPOSE(alphabet),alphabet))))

DEFINE(APPEND,LAMBDA(head,body,IF(GREATERTHAN?(COLUMNS(body),ROWS(body)),HSTACK(head,body),VSTACK(head,body))))

DEFINE(APPLY,LAMBDA(function,[argument1],[argument2],[argument3],[argument4],[argument5],[argument6],[argument7],[argument8],[argument9],[argument10],SWITCH(ARITY(argument1,argument2,argument3,argument4,argument5,argument6,argument7,argument8,argument9,argument10),0,function(),1,function(argument1),2,function(argument1, argument2),3,function(argument1, argument2, argument3),4,function(argument1, argument2, argument3, argument4),5,function(argument1, argument2, argument3, argument4, argument5),6,function(argument1, argument2, argument3, argument4, argument5, argument6),7,function(argument1, argument2, argument3, argument4, argument5, argument6, argument7),8,function(argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8),9,function(argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8, argument9),function(argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8, argument9, argument10))))

DEFINE(ARITY,LAMBDA([_arg1], [_arg2], [_arg3], [_arg4], [_arg5],[_arg6], [_arg7], [_arg8], [_arg9], [_arg10],[_arg11], [_arg12], [_arg13], [_arg14], [_arg15],[_arg16], [_arg17], [_arg18], [_arg19], [_arg20],[_arg21], [_arg22], [_arg23], [_arg24], [_arg25],SUM(IS(_arg1), IS(_arg2), IS(_arg3), IS(_arg4), IS(_arg5),IS(_arg6), IS(_arg7), IS(_arg8), IS(_arg9), IS(_arg10),IS(_arg11), IS(_arg12), IS(_arg13), IS(_arg14), IS(_arg15),IS(_arg16), IS(_arg17), IS(_arg18), IS(_arg19), IS(_arg20),IS(_arg21), IS(_arg22), IS(_arg23), IS(_arg24), IS(_arg25))))

DEFINE(ASSERT,LAMBDA(condition,[message],IF(condition,TRUE,DEFAULT(message,"Assertion failed"))))

DEFINE(BUILTINS,LAMBDA(VSTACK(BUILTINS.A(),BUILTINS.B(),BUILTINS.C(),BUILTINS.D(),BUILTINS.E(),BUILTINS.F(),BUILTINS.G(),BUILTINS.H(),BUILTINS.I(),BUILTINS.K(),BUILTINS.L(),BUILTINS.M(),BUILTINS.N(),BUILTINS.O(),BUILTINS.P(),BUILTINS.Q(),BUILTINS.R(),BUILTINS.S(),BUILTINS.T(),BUILTINS.U(),BUILTINS.V(),BUILTINS.W(),BUILTINS.X(),BUILTINS.Y(),BUILTINS.Z())))

DEFINE(BUILTINS.A,LAMBDA(VSTACK(HSTACK("ABS", ABS),HSTACK("ACCRINT", ACCRINT),HSTACK("ACCRINTM", ACCRINTM),HSTACK("ACOS", ACOS),HSTACK("ACOSH", ACOSH),HSTACK("ACOT", ACOT),HSTACK("ACOTH", ACOTH),HSTACK("ADDRESS", ADDRESS),HSTACK("AGGREGATE", AGGREGATE),HSTACK("AMORDEGRC", AMORDEGRC),HSTACK("AMORLINC", AMORLINC),HSTACK("AND", AND),HSTACK("ARABIC", ARABIC),HSTACK("AREAS", AREAS),HSTACK("ARRAYTOTEXT", ARRAYTOTEXT),HSTACK("ASC", ASC),HSTACK("ASIN", ASIN),HSTACK("ASINH", ASINH),HSTACK("ATAN", ATAN),HSTACK("ATAN2", ATAN2),HSTACK("ATANH", ATANH),HSTACK("AVEDEV", AVEDEV),HSTACK("AVERAGE", AVERAGE),HSTACK("AVERAGEA", AVERAGEA),HSTACK("AVERAGEIF", AVERAGEIF),HSTACK("AVERAGEIFS", AVERAGEIFS))))

DEFINE(BUILTINS.B,LAMBDA(VSTACK(HSTACK("BAHTTEXT", BAHTTEXT),HSTACK("BASE", BASE),HSTACK("BESSELI", BESSELI),HSTACK("BESSELJ", BESSELJ),HSTACK("BESSELK", BESSELK),HSTACK("BESSELY", BESSELY),HSTACK("BETA.DIST", BETA.DIST),HSTACK("BETADIST", BETADIST),HSTACK("BETAINV", BETAINV),HSTACK("BIN2DEC", BIN2DEC),HSTACK("BIN2HEX", BIN2HEX),HSTACK("BIN2OCT", BIN2OCT),HSTACK("BINOM.DIST", BINOM.DIST),HSTACK("BINOM.DIST.RANGE", BINOM.DIST.RANGE),HSTACK("BINOM.INV", BINOM.INV),HSTACK("BINOMDIST", BINOMDIST),HSTACK("BITAND", BITAND),HSTACK("BITLSHIFT", BITLSHIFT),HSTACK("BITOR", BITOR),HSTACK("BITRSHIFT", BITRSHIFT),HSTACK("BITXOR", BITXOR),HSTACK("BYCOL", BYCOL),HSTACK("BYROW", BYROW))))

DEFINE(BUILTINS.C,LAMBDA(VSTACK(HSTACK("CEILING", CEILING),HSTACK("CEILING.MATH", CEILING.MATH),HSTACK("CEILING.PRECISE", CEILING.PRECISE),HSTACK("CELL", CELL),HSTACK("CHAR", CHAR),HSTACK("CHIDIST", CHIDIST),HSTACK("CHIINV", CHIINV),HSTACK("CHISQ.DIST", CHISQ.DIST),HSTACK("CHISQ.DIST.RT", CHISQ.DIST.RT),HSTACK("CHISQ.INV", CHISQ.INV),HSTACK("CHISQ.INV.RT", CHISQ.INV.RT),HSTACK("CHISQ.TEST", CHISQ.TEST),HSTACK("CHITEST", CHITEST),HSTACK("CHOOSE", CHOOSE),HSTACK("CHOOSECOLS", CHOOSECOLS),HSTACK("CHOOSEROWS", CHOOSEROWS),HSTACK("CLEAN", CLEAN),HSTACK("CODE", CODE),HSTACK("COLUMN", COLUMN),HSTACK("COLUMNS", COLUMNS),HSTACK("COMBIN", COMBIN),HSTACK("COMBINA", COMBINA),HSTACK("COMPLEX", COMPLEX),HSTACK("CONCAT", CONCAT),HSTACK("CONCATENATE", CONCATENATE),HSTACK("CONFIDENCE", CONFIDENCE),HSTACK("CONFIDENCE.NORM", CONFIDENCE.NORM),HSTACK("CONFIDENCE.T", CONFIDENCE.T),HSTACK("CONVERT", CONVERT),HSTACK("CORREL", CORREL),HSTACK("COS", COS),HSTACK("COSH", COSH),HSTACK("COT", COT),HSTACK("COTH", COTH),HSTACK("COUNT", COUNT),HSTACK("COUNTA", COUNTA),HSTACK("COUNTBLANK", COUNTBLANK),HSTACK("COUNTIF", COUNTIF),HSTACK("COUNTIFS", COUNTIFS),HSTACK("COUPDAYBS", COUPDAYBS),HSTACK("COUPDAYS", COUPDAYS),HSTACK("COUPDAYSNC", COUPDAYSNC),HSTACK("COUPNCD", COUPNCD),HSTACK("COUPNUM", COUPNUM),HSTACK("COUPPCD", COUPPCD),HSTACK("COVAR", COVAR),HSTACK("COVARIANCE.P", COVARIANCE.P),HSTACK("COVARIANCE.S", COVARIANCE.S),HSTACK("CRITBINOM", CRITBINOM),HSTACK("CSC", CSC),HSTACK("CSCH", CSCH),HSTACK("CUBEKPIMEMBER", CUBEKPIMEMBER),HSTACK("CUBEMEMBER", CUBEMEMBER),HSTACK("CUBEMEMBERPROPERTY", CUBEMEMBERPROPERTY),HSTACK("CUBERANKEDMEMBER", CUBERANKEDMEMBER),HSTACK("CUBESET", CUBESET),HSTACK("CUBESETCOUNT", CUBESETCOUNT),HSTACK("CUBEVALUE", CUBEVALUE),HSTACK("CUMIPMT", CUMIPMT),HSTACK("CUMPRINC", CUMPRINC))))

DEFINE(BUILTINS.D,LAMBDA(VSTACK(HSTACK("DATE", DATE),HSTACK("DATEDIF", DATEDIF),HSTACK("DATEVALUE", DATEVALUE),HSTACK("DAVERAGE", DAVERAGE),HSTACK("DAY", DAY),HSTACK("DAYS", DAYS),HSTACK("DAYS360", DAYS360),HSTACK("DB", DB),HSTACK("DBCS", DBCS),HSTACK("DCOUNT", DCOUNT),HSTACK("DCOUNTA", DCOUNTA),HSTACK("DDB", DDB),HSTACK("DEC2BIN", DEC2BIN),HSTACK("DEC2HEX", DEC2HEX),HSTACK("DEC2OCT", DEC2OCT),HSTACK("DECIMAL", DECIMAL),HSTACK("DEGREES", DEGREES),HSTACK("DELTA", DELTA),HSTACK("DETECTLANGUAGE", DETECTLANGUAGE),HSTACK("DEVSQ", DEVSQ),HSTACK("DGET", DGET),HSTACK("DISC", DISC),HSTACK("DMAX", DMAX),HSTACK("DMIN", DMIN),HSTACK("DOLLAR", DOLLAR),HSTACK("DOLLARDE", DOLLARDE),HSTACK("DOLLARFR", DOLLARFR),HSTACK("DPRODUCT", DPRODUCT),HSTACK("DROP", DROP),HSTACK("DSTDEV", DSTDEV),HSTACK("DSTDEVP", DSTDEVP),HSTACK("DSUM", DSUM),HSTACK("DURATION", DURATION),HSTACK("DVAR", DVAR),HSTACK("DVARP", DVARP))))

DEFINE(BUILTINS.E,LAMBDA(VSTACK(HSTACK("EDATE", EDATE),HSTACK("EFFECT", EFFECT),HSTACK("ENCODEURL", ENCODEURL),HSTACK("EOMONTH", EOMONTH),HSTACK("ERF", ERF),HSTACK("ERF.PRECISE", ERF.PRECISE),HSTACK("ERFC", ERFC),HSTACK("ERFC.PRECISE", ERFC.PRECISE),HSTACK("ERROR.TYPE", ERROR.TYPE),HSTACK("EVEN", EVEN),HSTACK("EXACT", EXACT),HSTACK("EXP", EXP),HSTACK("EXPAND", EXPAND),HSTACK("EXPON.DIST", EXPON.DIST),HSTACK("EXPONDIST", EXPONDIST))))

DEFINE(BUILTINS.F,LAMBDA(VSTACK(HSTACK("F.DIST", F.DIST),HSTACK("F.DIST.RT", F.DIST.RT),HSTACK("F.INV", F.INV),HSTACK("F.INV.RT", F.INV.RT),HSTACK("F.TEST", F.TEST),HSTACK("FACT", FACT),HSTACK("FACTDOUBLE", FACTDOUBLE),HSTACK("FALSE", FALSE),HSTACK("FDIST", FDIST),HSTACK("FIELDFUNCTION", FIELDFUNCTION),HSTACK("FIELDVALUE", FIELDVALUE),HSTACK("FILTER", FILTER),HSTACK("FILTERXML", FILTERXML),HSTACK("FIND", FIND),HSTACK("FINDB", FINDB),HSTACK("FINV", FINV),HSTACK("FISHER", FISHER),HSTACK("FISHERINV", FISHERINV),HSTACK("FIXED", FIXED),HSTACK("FLOOR", FLOOR),HSTACK("FLOOR.MATH", FLOOR.MATH),HSTACK("FLOOR.PRECISE", FLOOR.PRECISE),HSTACK("FORECAST", FORECAST),HSTACK("FORECAST.ETS", FORECAST.ETS),HSTACK("FORECAST.ETS.CONFINT", FORECAST.ETS.CONFINT),HSTACK("FORECAST.ETS.SEASONALITY", FORECAST.ETS.SEASONALITY),HSTACK("FORECAST.ETS.STAT", FORECAST.ETS.STAT),HSTACK("FORECAST.LINEAR", FORECAST.LINEAR),HSTACK("FORMULATEXT", FORMULATEXT),HSTACK("FREQUENCY", FREQUENCY),HSTACK("FTEST", FTEST),HSTACK("FV", FV),HSTACK("FVSCHEDULE", FVSCHEDULE))))

DEFINE(BUILTINS.G,LAMBDA(VSTACK(HSTACK("GAMMA", GAMMA),HSTACK("GAMMA.DIST", GAMMA.DIST),HSTACK("GAMMA.INV", GAMMA.INV),HSTACK("GAMMADIST", GAMMADIST),HSTACK("GAMMAINV", GAMMAINV),HSTACK("GAMMALN", GAMMALN),HSTACK("GAMMALN.PRECISE", GAMMALN.PRECISE),HSTACK("GAUSS", GAUSS),HSTACK("GCD", GCD),HSTACK("GEOMEAN", GEOMEAN),HSTACK("GESTEP", GESTEP),HSTACK("GETPIVOTDATA", GETPIVOTDATA),HSTACK("GROUPBY", GROUPBY),HSTACK("GROWTH", GROWTH))))

DEFINE(BUILTINS.H,LAMBDA(VSTACK(HSTACK("HARMEAN", HARMEAN),HSTACK("HEX2BIN", HEX2BIN),HSTACK("HEX2DEC", HEX2DEC),HSTACK("HEX2OCT", HEX2OCT),HSTACK("HLOOKUP", HLOOKUP),HSTACK("HOUR", HOUR),HSTACK("HSTACK", HSTACK),HSTACK("HYPERLINK", HYPERLINK),HSTACK("HYPGEOM.DIST", HYPGEOM.DIST),HSTACK("HYPGEOMDIST", HYPGEOMDIST))))

DEFINE(BUILTINS.I,LAMBDA(VSTACK(HSTACK("IF", IF),HSTACK("IFERROR", IFERROR),HSTACK("IFNA", IFNA),HSTACK("IFS", IFS),HSTACK("IMABS", IMABS),HSTACK("IMAGE", IMAGE),HSTACK("IMAGINARY", IMAGINARY),HSTACK("IMARGUMENT", IMARGUMENT),HSTACK("IMCONJUGATE", IMCONJUGATE),HSTACK("IMCOS", IMCOS),HSTACK("IMCOSH", IMCOSH),HSTACK("IMCOT", IMCOT),HSTACK("IMCSC", IMCSC),HSTACK("IMCSCH", IMCSCH),HSTACK("IMDIV", IMDIV),HSTACK("IMEXP", IMEXP),HSTACK("IMLN", IMLN),HSTACK("IMLOG10", IMLOG10),HSTACK("IMLOG2", IMLOG2),HSTACK("IMPOWER", IMPOWER),HSTACK("IMPRODUCT", IMPRODUCT),HSTACK("IMREAL", IMREAL),HSTACK("IMSEC", IMSEC),HSTACK("IMSECH", IMSECH),HSTACK("IMSIN", IMSIN),HSTACK("IMSINH", IMSINH),HSTACK("IMSQRT", IMSQRT),HSTACK("IMSUB", IMSUB),HSTACK("IMSUM", IMSUM),HSTACK("IMTAN", IMTAN),HSTACK("INDEX", INDEX),HSTACK("INDIRECT", INDIRECT),HSTACK("INFO", INFO),HSTACK("INT", INT),HSTACK("INTERCEPT", INTERCEPT),HSTACK("INTRATE", INTRATE),HSTACK("IPMT", IPMT),HSTACK("IRR", IRR),HSTACK("ISBLANK", ISBLANK),HSTACK("ISERR", ISERR),HSTACK("ISERROR", ISERROR),HSTACK("ISEVEN", ISEVEN),HSTACK("ISFORMULA", ISFORMULA),HSTACK("ISLOGICAL", ISLOGICAL),HSTACK("ISNA", ISNA),HSTACK("ISNONTEXT", ISNONTEXT),HSTACK("ISNUMBER", ISNUMBER),HSTACK("ISODD", ISODD),HSTACK("ISOMITTED", ISOMITTED),HSTACK("ISOWEEKNUM", ISOWEEKNUM),HSTACK("ISPMT", ISPMT),HSTACK("ISREF", ISREF),HSTACK("ISTEXT", ISTEXT))))

DEFINE(BUILTINS.K,LAMBDA(VSTACK(HSTACK("KURT", KURT))))

DEFINE(BUILTINS.L,LAMBDA(VSTACK(HSTACK("LARGE", LARGE),HSTACK("LCM", LCM),HSTACK("LEFT", LEFT),HSTACK("LEFTB", LEFTB),HSTACK("LEN", LEN),HSTACK("LENB", LENB),HSTACK("LINEST", LINEST),HSTACK("LN", LN),HSTACK("LOG", LOG),HSTACK("LOG10", LOG10),HSTACK("LOGEST", LOGEST),HSTACK("LOGINV", LOGINV),HSTACK("LOGNORM.DIST", LOGNORM.DIST),HSTACK("LOGNORM.INV", LOGNORM.INV),HSTACK("LOGNORMDIST", LOGNORMDIST),HSTACK("LOOKUP", LOOKUP),HSTACK("LOWER", LOWER))))

DEFINE(BUILTINS.M,LAMBDA(VSTACK(HSTACK("MAKEARRAY", MAKEARRAY),HSTACK("MAP", MAP),HSTACK("MATCH", MATCH),HSTACK("MAX", MAX),HSTACK("MAXA", MAXA),HSTACK("MAXIFS", MAXIFS),HSTACK("MDETERM", MDETERM),HSTACK("MDURATION", MDURATION),HSTACK("MEDIAN", MEDIAN),HSTACK("MID", MID),HSTACK("MIDB", MIDB),HSTACK("MIN", MIN),HSTACK("MINA", MINA),HSTACK("MINIFS", MINIFS),HSTACK("MINUTE", MINUTE),HSTACK("MINVERSE", MINVERSE),HSTACK("MIRR", MIRR),HSTACK("MMULT", MMULT),HSTACK("MOD", MOD),HSTACK("MODE", MODE),HSTACK("MODE.MULT", MODE.MULT),HSTACK("MODE.SNGL", MODE.SNGL),HSTACK("MONTH", MONTH),HSTACK("MROUND", MROUND),HSTACK("MULTINOMIAL", MULTINOMIAL),HSTACK("MUNIT", MUNIT))))

DEFINE(BUILTINS.N,LAMBDA(VSTACK(HSTACK("N", N),HSTACK("NA", NA),HSTACK("NEGBINOM.DIST", NEGBINOM.DIST),HSTACK("NEGBINOMDIST", NEGBINOMDIST),HSTACK("NETWORKDAYS", NETWORKDAYS),HSTACK("NOMINAL", NOMINAL),HSTACK("NORM.DIST", NORM.DIST),HSTACK("NORM.INV", NORM.INV),HSTACK("NORM.S.DIST", NORM.S.DIST),HSTACK("NORM.S.INV", NORM.S.INV),HSTACK("NORMDIST", NORMDIST),HSTACK("NORMINV", NORMINV),HSTACK("NORMSDIST", NORMSDIST),HSTACK("NORMSINV", NORMSINV),HSTACK("NOT", NOT),HSTACK("NOW", NOW),HSTACK("NPER", NPER),HSTACK("NPV", NPV),HSTACK("NUMBERVALUE", NUMBERVALUE))))

DEFINE(BUILTINS.O,LAMBDA(VSTACK(HSTACK("OCT2BIN", OCT2BIN),HSTACK("OCT2DEC", OCT2DEC),HSTACK("OCT2HEX", OCT2HEX),HSTACK("ODD", ODD),HSTACK("ODDFPRICE", ODDFPRICE),HSTACK("ODDFYIELD", ODDFYIELD),HSTACK("ODDLPRICE", ODDLPRICE),HSTACK("ODDLYIELD", ODDLYIELD),HSTACK("OFFSET", OFFSET),HSTACK("OR", OR))))

DEFINE(BUILTINS.P,LAMBDA(VSTACK(HSTACK("PDURATION", PDURATION),HSTACK("PEARSON", PEARSON),HSTACK("PERCENTILE", PERCENTILE),HSTACK("PERCENTILE.EXC", PERCENTILE.EXC),HSTACK("PERCENTILE.INC", PERCENTILE.INC),HSTACK("PERCENTOF", PERCENTOF),HSTACK("PERCENTRANK", PERCENTRANK),HSTACK("PERCENTRANK.EXC", PERCENTRANK.EXC),HSTACK("PERCENTRANK.INC", PERCENTRANK.INC),HSTACK("PERMUT", PERMUT),HSTACK("PERMUTATIONA", PERMUTATIONA),HSTACK("PHI", PHI),HSTACK("PHONETIC", PHONETIC),HSTACK("PI", PI),HSTACK("PIVOTBY", PIVOTBY),HSTACK("PMT", PMT),HSTACK("POISSON", POISSON),HSTACK("POISSON.DIST", POISSON.DIST),HSTACK("POWER", POWER),HSTACK("PPMT", PPMT),HSTACK("PRICE", PRICE),HSTACK("PRICEDISC", PRICEDISC),HSTACK("PRICEMAT", PRICEMAT),HSTACK("PROB", PROB),HSTACK("PRODUCT", PRODUCT),HSTACK("PROPER", PROPER),HSTACK("PV", PV))))

DEFINE(BUILTINS.Q,LAMBDA(VSTACK(HSTACK("QUARTILE", QUARTILE),HSTACK("QUARTILE.EXC", QUARTILE.EXC),HSTACK("QUARTILE.INC", QUARTILE.INC),HSTACK("QUOTIENT", QUOTIENT))))

DEFINE(BUILTINS.R,LAMBDA(VSTACK(HSTACK("RADIANS", RADIANS),HSTACK("RAND", RAND),HSTACK("RANDARRAY", RANDARRAY),HSTACK("RANDBETWEEN", RANDBETWEEN),HSTACK("RANK", RANK),HSTACK("RANK.AVG", RANK.AVG),HSTACK("RANK.EQ", RANK.EQ),HSTACK("RATE", RATE),HSTACK("RECEIVED", RECEIVED),HSTACK("REDUCE", REDUCE),HSTACK("REGEXEXTRACT", REGEXEXTRACT),HSTACK("REGEXREPLACE", REGEXREPLACE),HSTACK("REGEXTEST", REGEXTEST),HSTACK("REPLACE", REPLACE),HSTACK("REPLACEB", REPLACEB),HSTACK("REPT", REPT),HSTACK("RIGHT", RIGHT),HSTACK("RIGHTB", RIGHTB),HSTACK("ROMAN", ROMAN),HSTACK("ROUND", ROUND),HSTACK("ROUNDDOWN", ROUNDDOWN),HSTACK("ROUNDUP", ROUNDUP),HSTACK("ROW", ROW),HSTACK("ROWS", ROWS),HSTACK("RRI", RRI),HSTACK("RSQ", RSQ),HSTACK("RTD", RTD))))

DEFINE(BUILTINS.S,LAMBDA(VSTACK(HSTACK("SCAN", SCAN),HSTACK("SEARCH", SEARCH),HSTACK("SEARCHB", SEARCHB),HSTACK("SEC", SEC),HSTACK("SECH", SECH),HSTACK("SECOND", SECOND),HSTACK("SEQUENCE", SEQUENCE),HSTACK("SERIESSUM", SERIESSUM),HSTACK("SHEET", SHEET),HSTACK("SHEETS", SHEETS),HSTACK("SIGN", SIGN),HSTACK("SIN", SIN),HSTACK("SINH", SINH),HSTACK("SKEW", SKEW),HSTACK("SKEW.P", SKEW.P),HSTACK("SLN", SLN),HSTACK("SLOPE", SLOPE),HSTACK("SMALL", SMALL),HSTACK("SORT", SORT),HSTACK("SORTBY", SORTBY),HSTACK("SQRT", SQRT),HSTACK("SQRTPI", SQRTPI),HSTACK("STANDARDIZE", STANDARDIZE),HSTACK("STDEV", STDEV),HSTACK("STDEV.P", STDEV.P),HSTACK("STDEV.S", STDEV.S),HSTACK("STDEVA", STDEVA),HSTACK("STDEVP", STDEVP),HSTACK("STDEVPA", STDEVPA),HSTACK("STEYX", STEYX),HSTACK("STOCKHISTORY", STOCKHISTORY),HSTACK("STOCKHISTORY", STOCKHISTORY),HSTACK("SUBSTITUTE", SUBSTITUTE),HSTACK("SUBTOTAL", SUBTOTAL),HSTACK("SUM", SUM),HSTACK("SUMIF", SUMIF),HSTACK("SUMIFS", SUMIFS),HSTACK("SUMPRODUCT", SUMPRODUCT),HSTACK("SUMSQ", SUMSQ),HSTACK("SUMX2MY2", SUMX2MY2),HSTACK("SUMX2PY2", SUMX2PY2),HSTACK("SUMXMY2", SUMXMY2),HSTACK("SWITCH", SWITCH),HSTACK("SYD", SYD))))

DEFINE(BUILTINS.T,LAMBDA(VSTACK(HSTACK("T", T),HSTACK("T.DIST", T.DIST),HSTACK("T.DIST.2T", T.DIST.2T),HSTACK("T.DIST.RT", T.DIST.RT),HSTACK("T.INV", T.INV),HSTACK("T.INV.2T", T.INV.2T),HSTACK("T.TEST", T.TEST),HSTACK("TAKE", TAKE),HSTACK("TAN", TAN),HSTACK("TANH", TANH),HSTACK("TBILLEQ", TBILLEQ),HSTACK("TBILLPRICE", TBILLPRICE),HSTACK("TBILLYIELD", TBILLYIELD),HSTACK("TDIST", TDIST),HSTACK("TEXT", TEXT),HSTACK("TEXTAFTER", TEXTAFTER),HSTACK("TEXTBEFORE", TEXTBEFORE),HSTACK("TEXTJOIN", TEXTJOIN),HSTACK("TEXTSPLIT", TEXTSPLIT),HSTACK("TIME", TIME),HSTACK("TIMEVALUE", TIMEVALUE),HSTACK("TINV", TINV),HSTACK("TOCOL", TOCOL),HSTACK("TODAY", TODAY),HSTACK("TOROW", TOROW),HSTACK("TRANSLATE", TRANSLATE),HSTACK("TRANSPOSE", TRANSPOSE),HSTACK("TREND", TREND),HSTACK("TRIM", TRIM),HSTACK("TRIMMEAN", TRIMMEAN),HSTACK("TRIMRANGE", TRIMRANGE),HSTACK("TRUE", TRUE),HSTACK("TRUNC", TRUNC),HSTACK("TTEST", TTEST),HSTACK("TYPE", TYPE))))

DEFINE(BUILTINS.U,LAMBDA(VSTACK(HSTACK("UNICHAR", UNICHAR),HSTACK("UNICODE", UNICODE),HSTACK("UNIQUE", UNIQUE),HSTACK("UPPER", UPPER))))

DEFINE(BUILTINS.V,LAMBDA(VSTACK(HSTACK("VALUE", VALUE),HSTACK("VALUETOTEXT", VALUETOTEXT),HSTACK("VAR", VAR),HSTACK("VAR.P", VAR.P),HSTACK("VAR.S", VAR.S),HSTACK("VARA", VARA),HSTACK("VARP", VARP),HSTACK("VARPA", VARPA),HSTACK("VDB", VDB),HSTACK("VLOOKUP", VLOOKUP),HSTACK("VSTACK", VSTACK))))

DEFINE(BUILTINS.W,LAMBDA(VSTACK(HSTACK("WEBSERVICE", WEBSERVICE),HSTACK("WEEKDAY", WEEKDAY),HSTACK("WEEKNUM", WEEKNUM),HSTACK("WEIBULL", WEIBULL),HSTACK("WEIBULL.DIST", WEIBULL.DIST),HSTACK("WORKDAY", WORKDAY),HSTACK("WRAPCOLS", WRAPCOLS),HSTACK("WRAPROWS", WRAPROWS))))

DEFINE(BUILTINS.X,LAMBDA(VSTACK(HSTACK("XIRR", XIRR),HSTACK("XLOOKUP", XLOOKUP),HSTACK("XMATCH", XMATCH),HSTACK("XNPV", XNPV),HSTACK("XOR", XOR))))

DEFINE(BUILTINS.Y,LAMBDA(VSTACK(HSTACK("YEAR", YEAR),HSTACK("YEARFRAC", YEARFRAC),HSTACK("YIELD", YIELD),HSTACK("YIELDDISC", YIELDDISC),HSTACK("YIELDMAT", YIELDMAT))))

DEFINE(BUILTINS.Z,LAMBDA(VSTACK(HSTACK("Z.TEST", Z.TEST),HSTACK("ZTEST", ZTEST))))

DEFINE(CAPITALIZE,LAMBDA(text,CONCAT(UPPER(FIRSTLETTER(text)),RIGHT(text, DECREMENT(LEN(text))))))

DEFINE(CAR,LAMBDA(range,INDEX(range,1,1)))

DEFINE(CASE,LAMBDA(_1a, _1b, [_2a], [_2b], [_3a], [_3b], [_4a], [_4b], [_5a], [_5b],[_6a], [_6b], [_7a], [_7b], [_8a], [_8b], [_9a], [_9b], [_10a], [_10b],LET(case1,EQUAL(_1a, _1b),case2,IFOMITTED(_2a, TRUE, EQUAL(_2a, _2b)),case3,IFOMITTED(_3a, TRUE, EQUAL(_3a, _3b)),case4,IFOMITTED(_4a, TRUE, EQUAL(_4a, _4b)),case5,IFOMITTED(_5a, TRUE, EQUAL(_5a, _5b)),case6,IFOMITTED(_6a, TRUE, EQUAL(_6a, _6b)),case7,IFOMITTED(_7a, TRUE, EQUAL(_7a, _7b)),case8,IFOMITTED(_8a, TRUE, EQUAL(_8a, _8b)),case9,IFOMITTED(_9a, TRUE, EQUAL(_9a, _9b)),case10,IFOMITTED(_10a, TRUE, EQUAL(_10a, _10b)),AND(case1,case2,case3,case4,case5,case6,case7,case8,case9,case10))))

DEFINE(CELLNAME,LAMBDA([reference],[absolute?],LET(address,IFOMITTED(reference,CELL("address"),CELL("address",reference)),display_absolute,DEFAULT(absolute?,NO),IF(display_absolute,address,SUBSTITUTE(address,"$","")))))

DEFINE(CDR,LAMBDA(range,IF(GREATERTHAN?(COLUMNS(range),ROWS(range)),MAKEARRAY(1,DECREMENT(COLUMNS(range)),LAMBDA(_row,col,INDEX(range,1,INCREMENT(col)))),MAKEARRAY(DECREMENT(ROWS(range)),1,LAMBDA(row,_col,INDEX(range,INCREMENT(row),1))))))

DEFINE(COINTOSS,LAMBDA(PICK("Heads","Tails")))

DEFINE(COLUMNLETTER,LAMBDA([cell_reference],TEXTBETWEEN(IFOMITTED(cell_reference,ADDRESS(ROW(),COLUMN()),ADDRESS(ROW(cell_reference),COLUMN(cell_reference))),"$","$")))

DEFINE(CONS,LAMBDA(value,range,IF(GREATERTHAN?(COLUMNS(range),ROWS(range)),HSTACK(value,range),VSTACK(value,range))))

DEFINE(CONSTANCY,LAMBDA(x,y,x))

DEFINE(CONTAINS,LAMBDA(haystack,needle,IF(AND(EQUAL(COUNTA(haystack),1),EQUAL(COUNTA(needle),1)),ISNUMBER(SEARCH(needle,haystack)),OR(EXACT(needle,haystack)))))

DEFINE(COUNTCELLS,LAMBDA(range,SUM(COUNTA(range),COUNTBLANK(range))))

DEFINE(CRITERIATABLE,LAMBDA(column_names,row_conditions,LET(condition_strings,TRIMSPLIT(row_conditions,",",YES),condition_count,COUNTA(condition_strings),condition_operators,EXTRACTOPERATORS(condition_strings),condition_column_indices,MAKEARRAY(condition_count,1,LAMBDA(row,_col,LET(condition,INDEX(condition_strings,row,1),operator,INDEX(condition_operators,row,1),MATCH(TRIM(TEXTBEFORE(condition,operator)),column_names,FALSE)))),condition_criteria,MAKEARRAY(condition_count,1,LAMBDA(row,_col,LET(condition,INDEX(condition_strings,row,1),operator,INDEX(condition_operators,row,1),result,TRIM(TEXTAFTER(condition,operator)),IFERROR(NUMBERVALUE(result),result)))),HSTACK(condition_operators,condition_column_indices,condition_criteria))))

DEFINE(CUBEROOT,LAMBDA(x,POWER(x,RATIO(1,3))))

DEFINE(CURRY,LAMBDA(function,argument1,LAMBDA(argument2,function(argument1,argument2))))

DEFINE(DECREMENT,LAMBDA(x,[times],SUM(x,PRODUCT(-1,DEFAULT(times,1)))))

DEFINE(DEFAULT,LAMBDA(optional_argument,fallback_value,IF(PROVIDED?(optional_argument),optional_argument,fallback_value)))

DEFINE(DICEROLL,LAMBDA(PICK(1,2,3,4,5,6)))

DEFINE(DIFFERENCE,LAMBDA(minuend,subtrahend,minuend-subtrahend))

DEFINE(EMPTYLIST?,LAMBDA(input,LET(occupied_cells,COUNTA(input),blank_cells,COUNTBLANK(input),IF(ONE?(SUM(occupied_cells,blank_cells)),OR(ISBLANK(input),EQUAL(input,"()"),NO)))))

DEFINE(ENDSWITH?,LAMBDA(text,ending,[case_sensitive?],REGEXTEST(text,FORMAT("{1}$", ending),DEFAULT(case_sensitive?, FALSE))))

DEFINE(EQUAL,LAMBDA(a,b,a=b))

DEFINE(EXTRACTOPERATOR,LAMBDA(condition_string,IFS(ISNUMBER(FIND("<>", condition_string)),HSTACK("<>", NOTEQUAL),ISNUMBER(FIND("<=", condition_string)),HSTACK("<=", LTE),ISNUMBER(FIND(">=", condition_string)),HSTACK(">=", GTE),ISNUMBER(FIND("<", condition_string)),HSTACK("<", LESSTHAN),ISNUMBER(FIND(">", condition_string)),HSTACK(">", GREATERTHAN),ISNUMBER(FIND("!=", condition_string)),HSTACK("!=", NOTEQUAL),ISNUMBER(FIND("=", condition_string)),HSTACK("=", EQUAL),OTHERWISE,NA())))

DEFINE(EXTRACTOPERATORS,LAMBDA(condition_strings,IF(ONE?(COUNTA(condition_strings)),EXTRACTOPERATOR(condition_strings),VSTACK(EXTRACTOPERATOR(FIRST(condition_strings)),EXTRACTOPERATORS(REST(condition_strings))))))

DEFINE(FILENAME,LAMBDA([reference],CELL("filename",DEFAULT(reference,INDIRECT(CONCAT("A1"))))))

DEFINE(FIRST,LAMBDA(range,CAR(range)))

DEFINE(FIRSTCOLUMN,LAMBDA(range,INDEX(range,0,1)))

DEFINE(FIRSTLETTER,LAMBDA(text,LEFT(text,1)))

DEFINE(FIRSTROW,LAMBDA(range,INDEX(range,1,0)))

DEFINE(FIRSTWORD,LAMBDA(text,LEFT(TRIM(text),DECREMENT(FIND(" ",TRIM(text))))))

DEFINE(FLIPCOIN,LAMBDA([times],LET(counter,DEFAULT(times, 1),IF(LTE?(counter, 1),COINTOSS(),VSTACK(COINTOSS(),FLIPCOIN(DECREMENT(counter)))))))

DEFINE(FOREACH,LAMBDA(range,function_to_apply,MAP(range,function_to_apply)))

DEFINE(FORMAT,LAMBDA(template_text,first_value,[second_value],[third_value],[fourth_value],[fifth_value],[sixth_value],[seventh_value],[eigth_value],[ninth_value],[tenth_value],LET(_after1,SUBSTITUTE(template_text,"{1}", first_value),_after2,IF(PROVIDED?(second_value),SUBSTITUTE(_after1,"{2}", second_value),_after1),_after3,IF(PROVIDED?(third_value),SUBSTITUTE(_after2,"{3}", third_value),_after2),_after4,IF(PROVIDED?(fourth_value),SUBSTITUTE(_after3,"{4}", fourth_value),_after3),_after5,IF(PROVIDED?(fifth_value),SUBSTITUTE(_after4,"{5}", fifth_value),_after4),_after6,IF(PROVIDED?(sixth_value),SUBSTITUTE(_after5,"{6}", sixth_value),_after5),_after7,IF(PROVIDED?(seventh_value),SUBSTITUTE(_after6,"{7}", seventh_value),_after6),_after8,IF(PROVIDED?(eigth_value),SUBSTITUTE(_after7,"{8}", eigth_value),_after7),_after9,IF(PROVIDED?(ninth_value),SUBSTITUTE(_after8,"{9}", ninth_value),_after8),IF(PROVIDED?(tenth_value),SUBSTITUTE(_after9,"{10}", tenth_value),_after9))))

DEFINE(FULLDECK,LAMBDA([vertical],LET(full_deck,HSTACK({"AS","KS","QS","JS","XS","9S","8S","7S","6S","5S","4S","3S","2S"},{"AH","KH","QH","JH","XH","9H","8H","7H","6H","5H","4H","3H","2H"},{"AD","KD","QD","JD","XD","9D","8D","7D","6D","5D","4D","3D","2D"},{"AC","KC","QC","JC","XC","9C","8C","7C","6C","5C","4C","3C","2C"}),IF(DEFAULT(vertical,FALSE),TRANSPOSE(full_deck),full_deck))))

DEFINE(FUNCTION,LAMBDA([name],VLOOKUP(DEFAULT(name,"FUNCTION"),FUNCTIONS(),2,0)))

DEFINE(FUNCTIONS,LAMBDA(SORT(VSTACK(BUILTINS(),SL()))))

DEFINE(GREATERTHAN?,LAMBDA(x,y,x>y))

DEFINE(GTE?,LAMBDA(x,y,x>=y))

DEFINE(HEADLESS,LAMBDA(range,MAKEARRAY(DECREMENT(ROWS(range)),COLUMNS(range),LAMBDA(row,col,INDEX(range,INCREMENT(row),col)))))

DEFINE(HLIST,LAMBDA([_1], [_2], [_3], [_4], [_5],[_6], [_7], [_8], [_9], [_10],[_11], [_12], [_13], [_14], [_15],[_16], [_17], [_18], [_19], [_20],[_21], [_22], [_23], [_24], [_25],LET(column_count,SUM(IS(_1), IS(_2), IS(_3), IS(_4), IS(_5),IS(_6), IS(_7), IS(_8), IS(_9), IS(_10),IS(_11), IS(_12), IS(_13), IS(_14), IS(_15),IS(_16), IS(_17), IS(_18), IS(_19), IS(_20),IS(_21), IS(_22), IS(_23), IS(_24), IS(_25)),IF(EQUAL(column_count,0),"()",MAKEARRAY(1,column_count,LAMBDA(_row,col,CHOOSE(col,_1, _2, _3, _4, _5,_6, _7, _8, _9, _10,_11, _12, _13, _14, _15,_16, _17, _18, _19, _20,_21, _22, _23, _24, _25)))))))

DEFINE(IDENTITY,LAMBDA(x,x))

DEFINE(IFBLANK,LAMBDA(cell_reference,value_if_blank,[value_if_not_blank],IF(OR(ISBLANK(cell_reference),EQUAL(cell_reference,""),value_if_blank,DEFAULT(value_if_not_blank, cell_reference)))))

DEFINE(IFOMITTED,LAMBDA(optional_argument,value_if_omitted,value_if_provided,IF(ISOMITTED(optional_argument),value_if_omitted,value_if_provided)))

DEFINE(INCREMENT,LAMBDA(x,[times],SUM(x,DEFAULT(times,1))))

DEFINE(INDICES,LAMBDA(subset,superset,LET(vertical_subset,IF(HORIZONTAL?(subset),TRANSPOSE(subset),subset),vertical_superset,IF(HORIZONTAL?(superset),TRANSPOSE(superset),superset),MAKEARRAY(COUNTA(vertical_subset),1,LAMBDA(row,_col,MATCH(INDEX(vertical_subset,row,1),vertical_superset,FALSE))))))

DEFINE(IS,LAMBDA(argument,IF(ISOMITTED(argument), 0, 1)))

DEFINE(ISATOM,LAMBDA(input,MEMBER(TYPESTRING(input),VLIST("Number","String","Error"))))

DEFINE(HORIZONTAL?,LAMBDA(range,IF(GREATERTHAN?(COLUMNS(range),ROWS(range)),TRUE,FALSE)))

DEFINE(RANGE?,LAMBDA(input,EQUAL(TYPESTRING(input),"Range")))

DEFINE(VERTICAL?,LAMBDA(range,IF(GREATERTHAN?(ROWS(range),COLUMNS(range)),TRUE,FALSE)))

DEFINE(LAST,LAMBDA(range,IF(GREATERTHAN?(COLUMNS(range),ROWS(range)),INDEX(range,1,COUNTA(range)),INDEX(range,COUNTA(range),1))))

DEFINE(LESSTHAN?,LAMBDA(x,y,x<y))

DEFINE(LTE?,LAMBDA(x,y,x<=y))

DEFINE(MAGIC8BALL,LAMBDA([yes_or_no_question],IF(PROVIDED?(yes_or_no_question),PICK("It is certain","Reply hazy, try again","It is decidedly so","Without a doubt","Don't count on it","Yes, definitely","Ask again later","You may rely on it","My reply is no","As I see it, yes","Better not tell you now","Most likely","My sources say no","Outlook good","Cannot predict now","Yes","Outlook not so good","Signs point to yes","Concentrate and ask again","Very doubtful"),"Ask, and you will be answered")))

DEFINE(MEETSCRITERIA,LAMBDA(row_data,criteria_table,ALL(MAKEARRAY(ROWS(criteria_table),1,LAMBDA(row,_col,LET(function,INDEX(criteria_table,row,2),value,INDEX(row_data,1,INDEX(criteria_table,row,3)),criterion,INDEX(criteria_table,row,4),APPLY(function,value,criterion)))))))

DEFINE(MEMBER,LAMBDA(needle,haystack,OR(EXACT(needle, haystack))))

DEFINE(NEGATIVE?,LAMBDA(x,LESSTHAN?(x,0)))

DEFINE(NO,FALSE)

DEFINE(NOTEQUAL,LAMBDA(a,b,NOT(EQUAL(a,b))))

DEFINE(ONE?,LAMBDA(x,EQUAL(x,1)))

DEFINE(OTHERWISE,TRUE)

DEFINE(PICK,LAMBDA(_1, [_2], [_3], [_4], [_5],[_6], [_7], [_8], [_9], [_10],[_11], [_12], [_13], [_14], [_15],[_16], [_17], [_18], [_19], [_20],[_21], [_22], [_23], [_24], [_25],LET(count,SUM(IS(_1), IS(_2), IS(_3), IS(_4), IS(_5),IS(_6), IS(_7), IS(_8), IS(_9), IS(_10),IS(_11), IS(_12), IS(_13), IS(_14), IS(_15),IS(_16), IS(_17), IS(_18), IS(_19), IS(_20),IS(_21), IS(_22), IS(_23), IS(_24), IS(_25)),CHOOSE(RANDBETWEEN(1, count), _1, _2, _3, _4, _5, _6, _7, _8, _9, _10,_11, _12, _13, _14, _15,_16, _17, _18, _19, _20,_21, _22, _23, _24, _25))))

DEFINE(POSITIVE?,LAMBDA(x,GREATERTHAN?(x,0)))

DEFINE(PROVIDED?,LAMBDA([argument],NOT(ISOMITTED(argument))))

DEFINE(QUESTION,LAMBDA(knowledgebase,fragment1,[fragment2],[fragment3],[fragment4],[fragment5],[fragment6],[fragment7],[fragment8],[fragment9],[fragment10],LET(arity,ARITY(fragment1,fragment2,fragment3,fragment4,fragment5,fragment6,fragment7,fragment8,fragment9,fragment10),template,CHOOSE(arity,"('{1}').","('{1}', '{2}').","('{1}', '{2}', '{3}').","('{1}', '{2}', '{3}', '{4}').","('{1}', '{2}', '{3}', '{4}', '{5}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}')."),subject,fragment2,question_word,LOWER(fragment1),CONTAINS(knowledgebase,FORMAT(template,subject,question_word,fragment3,fragment4,fragment5,fragment6,fragment7,fragment8,fragment9,fragment10)))))

DEFINE(RATIO,LAMBDA(numerator,denominator,numerator / denominator))

DEFINE(REST,LAMBDA(range,CDR(range)))

DEFINE(REVERSE,LAMBDA(range,IF(GREATERTHAN?(COLUMNS(range),ROWS(range)),MAKEARRAY(1,COLUMNS(range),LAMBDA(_row,col,INDEX(range,1,DECREMENT(COUNTCELLS(range),DECREMENT(col))))),MAKEARRAY(ROWS(range),1,LAMBDA(row,_col,INDEX(range,DECREMENT(COUNTCELLS(range),DECREMENT(row)),1))))))

DEFINE(ROCKPAPERSCISSORS,LAMBDA(throw,LET(human,CAPITALIZE(LOWER(DEFAULT(throw,""))),robot,PICK("Rock","Paper","Scissors"),CONCAT(FORMAT("You threw {1}. SL threw {2}. ",human,robot),IFS(CASE(human,robot),FORMAT("It's a tie! {1} vs. {1}",human),CASE(human,"Paper",robot,"Rock"),"You win! Paper covers Rock.",CASE(human,"Paper",robot,"Scissors"),"You lose! Scissors cut Paper.",CASE(human,"Rock",robot,"Scissors"),"You win! Rock crushes Scissors.",CASE(human,"Rock",robot,"Paper"),"You lose! Paper covers Rock.",CASE(human,"Scissors",robot,"Paper"),"You win! Scissors cut Paper.",CASE(human,"Scissors",robot,"Rock"),"You lose! Rock crushes Scissors.",OTHERWISE,"Invalid throw. Please choose Rock, Paper, or Scissors.")))))

DEFINE(ROLLDICE,LAMBDA([times],IF(LTE?(DEFAULT(times,1),1),DICEROLL(),CONS(DICEROLL(),ROLLDICE(DECREMENT(times))))))

DEFINE(SELECTFROM,LAMBDA(columns,table_range,[row_conditions],SELECTCOLUMNS(SELECTROWS(table_range,row_conditions),columns)))

DEFINE(SELECTCOLUMNS,LAMBDA(table_range,[columns],IF(OR(ISOMITTED(columns),MEMBER(UPPER(DEFAULT(columns, "")),VLIST("*","ALL"))),table_range,LET(column_names,IF(ISTEXT(columns),TRIMSPLIT(columns,","),columns),column_indices,INDICES(column_names,FIRSTROW(table_range)),IF(ONE?(COUNT(column_indices)),CHOOSECOLS(table_range,column_indices),HSTACK(CHOOSECOLS(table_range,FIRST(column_indices)),SELECTCOLUMNS(table_range,REST(column_names))))))))

DEFINE(SELECTROWS,LAMBDA(table_range,[row_conditions],IFOMITTED(row_conditions,table_range,LET(column_names,FIRSTROW(table_range),VSTACK(column_names,SIEVE(HEADLESS(table_range),CRITERIATABLE(column_names,row_conditions)))))))

DEFINE(SHEETNAME,LAMBDA([reference],LET(filename,FILENAME(reference),bracket_position,FIND("]",filename),RIGHT(filename,DECREMENT(LEN(filename),bracket_position)))))

DEFINE(SIEVE,LAMBDA(table_data,filter_lookup_table,FILTER(table_data,BYROW(table_data,LAMBDA(row,MEETSCRITERIA(row,filter_lookup_table))))))

DEFINE(SL,LAMBDA(VSTACK(HSTACK("_1_are_2.", _1_are_2.),HSTACK("_1_is_2.", _1_is_2.),HSTACK("_1_is_not_2.", _1_is_not_2.),HSTACK("_Is_1_2?", _Is_1_2?),HSTACK("ALL", ALL),HSTACK("ALPHABET", ALPHABET),HSTACK("APPEND", APPEND),HSTACK("APPLY", APPLY),HSTACK("ARITY", ARITY),HSTACK("ASSERT", ASSERT),HSTACK("BUILTINS", BUILTINS),HSTACK("BUILTINS.A", BUILTINS.A),HSTACK("BUILTINS.B", BUILTINS.B),HSTACK("BUILTINS.C", BUILTINS.C),HSTACK("BUILTINS.D", BUILTINS.D),HSTACK("BUILTINS.E", BUILTINS.E),HSTACK("BUILTINS.F", BUILTINS.F),HSTACK("BUILTINS.G", BUILTINS.G),HSTACK("BUILTINS.H", BUILTINS.H),HSTACK("BUILTINS.I", BUILTINS.I),HSTACK("BUILTINS.K", BUILTINS.K),HSTACK("BUILTINS.L", BUILTINS.L),HSTACK("BUILTINS.M", BUILTINS.M),HSTACK("BUILTINS.N", BUILTINS.N),HSTACK("BUILTINS.O", BUILTINS.O),HSTACK("BUILTINS.P", BUILTINS.P),HSTACK("BUILTINS.Q", BUILTINS.Q),HSTACK("BUILTINS.R", BUILTINS.R),HSTACK("BUILTINS.S", BUILTINS.S),HSTACK("BUILTINS.T", BUILTINS.T),HSTACK("BUILTINS.U", BUILTINS.U),HSTACK("BUILTINS.V", BUILTINS.V),HSTACK("BUILTINS.W", BUILTINS.W),HSTACK("BUILTINS.X", BUILTINS.X),HSTACK("BUILTINS.Y", BUILTINS.Y),HSTACK("BUILTINS.Z", BUILTINS.Z),HSTACK("CAPITALIZE", CAPITALIZE),HSTACK("CAR", CAR),HSTACK("CASE", CASE),HSTACK("CDR", CDR),HSTACK("CELLNAME", CELLNAME),HSTACK("COINTOSS", COINTOSS),HSTACK("COLUMNLETTER", COLUMNLETTER),HSTACK("CONS", CONS),HSTACK("CONSTANCY", CONSTANCY),HSTACK("CONTAINS", CONTAINS),HSTACK("COUNTCELLS", COUNTCELLS),HSTACK("CRITERIATABLE", CRITERIATABLE),HSTACK("CUBEROOT", CUBEROOT),HSTACK("CURRY", CURRY),HSTACK("DECREMENT", DECREMENT),HSTACK("DEFAULT", DEFAULT),HSTACK("DICEROLL", DICEROLL),HSTACK("DIFFERENCE", DIFFERENCE),HSTACK("EMPTYLIST?", EMPTYLIST?),HSTACK("EQUAL", EQUAL),HSTACK("EXTRACTOPERATOR", EXTRACTOPERATOR),HSTACK("EXTRACTOPERATORS", EXTRACTOPERATORS),HSTACK("FILENAME", FILENAME),HSTACK("FIRST", FIRST),HSTACK("FIRSTCOLUMN", FIRSTCOLUMN),HSTACK("FIRSTLETTER", FIRSTLETTER),HSTACK("FIRSTROW", FIRSTROW),HSTACK("FIRSTWORD", FIRSTWORD),HSTACK("FLIPCOIN", FLIPCOIN),HSTACK("FOREACH", FOREACH),HSTACK("FORMAT", FORMAT),HSTACK("FULLDECK", FULLDECK),HSTACK("FUNCTION", FUNCTION),HSTACK("FUNCTIONS", FUNCTIONS),HSTACK("GREATERTHAN?", GREATERTHAN?),HSTACK("GTE?", GTE?),HSTACK("HEADLESS", HEADLESS),HSTACK("HLIST", HLIST),HSTACK("HORIZONTAL?", HORIZONTAL?),HSTACK("IDENTITY", IDENTITY),HSTACK("IFBLANK", IFBLANK),HSTACK("IFOMITTED", IFOMITTED),HSTACK("INCREMENT", INCREMENT),HSTACK("INDICES", INDICES),HSTACK("IS", IS),HSTACK("ISATOM", ISATOM),HSTACK("LAST", LAST),HSTACK("LESSTHAN?", LESSTHAN?),HSTACK("LTE?", LTE?),HSTACK("MAGIC8BALL", MAGIC8BALL),HSTACK("MEETSCRITERIA", MEETSCRITERIA),HSTACK("MEMBER", MEMBER),HSTACK("NEGATIVE?", NEGATIVE?),HSTACK("NO", NO),HSTACK("NOTEQUAL", NOTEQUAL),HSTACK("ONE?", ONE?),HSTACK("OTHERWISE", OTHERWISE),HSTACK("PICK", PICK),HSTACK("POSITIVE?", POSITIVE?),HSTACK("PROVIDED?", PROVIDED?),HSTACK("QUESTION", QUESTION),HSTACK("RANGE?", RANGE?),HSTACK("RATIO", RATIO),HSTACK("REST", REST),HSTACK("REVERSE", REVERSE),HSTACK("ROCKPAPERSCISSORS", ROCKPAPERSCISSORS),HSTACK("ROLLDICE", ROLLDICE),HSTACK("SELECTCOLUMNS", SELECTCOLUMNS),HSTACK("SELECTFROM", SELECTFROM),HSTACK("SELECTROWS", SELECTROWS),HSTACK("SHEETNAME", SHEETNAME),HSTACK("SIEVE", SIEVE),HSTACK("SL", SL),HSTACK("SQUAREROOT", SQUAREROOT),HSTACK("STATEMENT", STATEMENT),HSTACK("TEXTBETWEEN", TEXTBETWEEN),HSTACK("TEXTTOCOLUMNS", TEXTTOCOLUMNS),HSTACK("TEXTTOROWS", TEXTTOROWS),HSTACK("TRIMALL", TRIMALL),HSTACK("TRIMSPLIT", TRIMSPLIT),HSTACK("TYPESTRING", TYPESTRING),HSTACK("VERTICAL?", VERTICAL?),HSTACK("VLIST", VLIST),HSTACK("YES", YES),HSTACK("ZERO?", ZERO?))))

DEFINE(SQUAREROOT,LAMBDA(x,POWER(x,0.5)))

DEFINE(STATEMENT,LAMBDA(fragment1,[fragment2],[fragment3],[fragment4],[fragment5],[fragment6],[fragment7],[fragment8],[fragment9],[fragment10],LET(arity,ARITY(fragment1,fragment2,fragment3,fragment4,fragment5,fragment6,fragment7,fragment8,fragment9,fragment10),template,CHOOSE(arity,"('{1}').","('{1}', '{2}').","('{1}', '{2}', '{3}').","('{1}', '{2}', '{3}', '{4}').","('{1}', '{2}', '{3}', '{4}', '{5}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}').","('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}')."),FORMAT(template,fragment1,fragment2,fragment3,fragment4,fragment5,fragment6,fragment7,fragment8,fragment9,fragment10))))

DEFINE(TEXTBETWEEN,LAMBDA(source_text,first_boundary,second_boundary,LET(text_after_first_boundary,RIGHT(source_text,DIFFERENCE(LEN(source_text),DECREMENT(SUM(FIND(first_boundary,source_text),LEN(first_boundary))))),LEFT(text_after_first_boundary,DECREMENT(FIND(second_boundary,text_after_first_boundary))))))

DEFINE(TEXTTOCOLUMNS,LAMBDA(text,delimiter,TEXTSPLIT(text,delimiter)))

DEFINE(TEXTTOROWS,LAMBDA(text,delimiter,TRANSPOSE(TEXTSPLIT(text,delimiter))))

DEFINE(TRIMALL,LAMBDA(range,MAKEARRAY(ROWS(range),COLUMNS(range),LAMBDA(row,col,TRIM(INDEX(range,row,col))))))

DEFINE(TRIMSPLIT,LAMBDA(source_text,split_at,[display_vertically],LET(result,TRIMALL(TEXTSPLIT(source_text,split_at)),IF(DEFAULT(display_vertically,FALSE),TRANSPOSE(result),result))))

DEFINE(TYPESTRING,LAMBDA(input,[recursive],SWITCH(TYPE(input),1,"Number",2,"String",4,"Boolean",16,"Error",64,IF(DEFAULT(recursive,FALSE),MAP(input,LAMBDA(each,TYPESTRING(each))),"Range"),128,"Function",OTHERWISE,"Unknown")))

DEFINE(VLIST,LAMBDA([_1], [_2], [_3], [_4], [_5],[_6], [_7], [_8], [_9], [_10],[_11], [_12], [_13], [_14], [_15],[_16], [_17], [_18], [_19], [_20],[_21], [_22], [_23], [_24], [_25],LET(row_count,SUM(IS(_1), IS(_2), IS(_3), IS(_4), IS(_5),IS(_6), IS(_7), IS(_8), IS(_9), IS(_10),IS(_11), IS(_12), IS(_13), IS(_14), IS(_15),IS(_16), IS(_17), IS(_18), IS(_19), IS(_20),IS(_21), IS(_22), IS(_23), IS(_24), IS(_25)),IF(EQUAL(row_count,0),"()",MAKEARRAY(row_count,1,LAMBDA(row,_col,CHOOSE(row,_1, _2, _3, _4, _5,_6, _7, _8, _9, _10,_11, _12, _13, _14, _15,_16, _17, _18, _19, _20,_21, _22, _23, _24, _25)))))))

DEFINE(YES,TRUE)

DEFINE(ZERO?,LAMBDA(x,EQUAL(x,0)))
